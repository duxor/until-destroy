{"version":3,"sources":["ng://@ngneat/until-destroy/lib/internals.ts","ng://@ngneat/until-destroy/lib/until-destroy.ts","ng://@ngneat/until-destroy/lib/until-destroyed.ts"],"names":["isFunction","target","DESTROY","Symbol","DECORATOR_APPLIED","markAsDecorated","providerOrDef","createSubjectOnTheInstance","instance","Subject","completeSubjectOnTheInstance","next","complete","getDef","type","ɵcmp","ɵdir","isInjectableType","ɵprov","unsubscribe","property","decorateNgOnDestroy","ngOnDestroy","_a","arrayName","checkProperties","blackList","call","this","Array","isArray","forEach","unsubscribeIfPropertyIsArrayLike","includes","options","prototype","decorateProvider","def","onDestroy","decorateDirective","destroyMethodName","source","originalDestroy","Error","constructor","name","apply","arguments","overrideNonDirectiveInstanceMethod","ensureClassIsDecorated","pipe","takeUntil"],"mappings":"4WASgBA,EAAWC,GACzB,MAAyB,mBAAXA,EAMT,IAAMC,EAAyBC,OAAO,aAKvCC,EAAmCD,OAAO,+BAEhCE,EACdC,GAECA,EAAsBF,IAAqB,WAsB9BG,EAA2BC,GACpCA,EAASN,KACZM,EAASN,GAAW,IAAIO,EAAAA,kBAIZC,EAA6BF,GACvCA,EAASN,KACXM,EAASN,GAASS,OAClBH,EAASN,GAASU,qBAQNC,EACdC,GAEA,OAAQA,EAA0BC,MAASD,EAA0BE,cAOvDC,EAAiBhB,GAC/B,QAASA,EAAOiB,MC7DlB,SAASC,EAAYC,GACnBA,GAAYpB,EAAWoB,EAASD,cAAgBC,EAASD,cAO3D,SAASE,EACPC,EACAC,OAAEC,EAAAD,EAAAC,UAAWC,EAAAF,EAAAE,gBAAiBC,EAAAH,EAAAG,UAE9B,OAAO,WASL,GAPAJ,GAAeA,EAAYK,KAAKC,MAIhClB,EAA6BkB,MAGzBJ,EACF,OAlBN,SAA0CJ,GACxCS,MAAMC,QAAQV,IAAaA,EAASW,QAAQZ,GAiBjCa,CAAiCJ,KAAKJ,IAI/C,GAAIC,EACF,IAAK,IAAML,KAAYQ,KACjBF,GAAaA,EAAUO,SAASb,IAIpCD,EAAYS,KAAKR,oBAwBzB,SAA6Bc,GAC3B,YAD2B,IAAAA,IAAAA,EAAA,IACpB,SAACjC,GACFgB,EAAiBhB,GAhBzB,SAA0Ba,EAA+BoB,GACvDpB,EAAKqB,UAAUb,YAAcD,EAAoBP,EAAKqB,UAAUb,YAAaY,GAC7E7B,EAAgBS,GAeZsB,CAAiBnC,EAAQiC,GAZ/B,SACEpB,EACAoB,GAEA,IAAMG,EAAMxB,EAAOC,GAClBuB,EAAYC,UAAYjB,EAAoBgB,EAAIC,UAAWJ,GAC5D7B,EAAgBgC,GAQZE,CAAkBtC,EAAQiC,sBChDhC,SAA+B1B,EAAegC,GAC5C,OAAO,SAAIC,GAUT,MAPiC,iBAAtBD,EArBf,SAA4ChC,EAAegC,GACzD,IAAME,EAAkBlC,EAASgC,GAEjC,IAAoC,IAAhCxC,EAAW0C,GACb,MAAM,IAAIC,MACLnC,EAASoC,YAAYC,KAAI,kDAAkDL,GAIlFjC,EAA2BC,GAE3BA,EAASgC,GAAqB,WAC5BxC,EAAW0C,IAAoBA,EAAgBI,MAAMlB,KAAMmB,WAC3DrC,EAA6BkB,OAS3BoB,CAAmCxC,EAAUgC,cFEZhC,GACrC,IAAMoC,EAAcpC,EAASoC,YAI7B,KAHsB3B,EAAiB2B,GAAeA,EAAc/B,EAAO+B,IAC1BxC,GAG/C,MAAM,IAAIuC,MACR,0IEPAM,CAAuBzC,GACvBD,EAA2BC,IAGtBiC,EAAOS,KAAKC,EAAAA,UAAa3C,EAASN","sourcesContent":["import {\n  InjectableType,\n  ɵComponentType as ComponentType,\n  ɵDirectiveType as DirectiveType,\n  ɵComponentDef as ComponentDef,\n  ɵDirectiveDef as DirectiveDef\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\nexport function isFunction(target: unknown) {\n  return typeof target === 'function';\n}\n\n/**\n * Applied to instances and stores `Subject` instance\n */\nexport const DESTROY: unique symbol = Symbol('__destroy');\n\n/**\n * Applied to definitions and informs that class is decorated\n */\nconst DECORATOR_APPLIED: unique symbol = Symbol('__decoratorApplied');\n\nexport function markAsDecorated(\n  providerOrDef: InjectableType<unknown> | DirectiveDef<unknown> | ComponentDef<unknown>\n): void {\n  (providerOrDef as any)[DECORATOR_APPLIED] = true;\n}\n\nexport interface UntilDestroyOptions {\n  blackList?: string[];\n  arrayName?: string;\n  checkProperties?: boolean;\n}\n\nexport function ensureClassIsDecorated(instance: any): never | void {\n  const constructor = instance.constructor;\n  const providerOrDef = isInjectableType(constructor) ? constructor : getDef(constructor);\n  const missingDecorator = !(providerOrDef as any)[DECORATOR_APPLIED];\n\n  if (missingDecorator) {\n    throw new Error(\n      'untilDestroyed operator cannot be used inside directives or ' +\n        'components or providers that are not decorated with UntilDestroy decorator'\n    );\n  }\n}\n\nexport function createSubjectOnTheInstance(instance: any): void {\n  if (!instance[DESTROY]) {\n    instance[DESTROY] = new Subject<void>();\n  }\n}\n\nexport function completeSubjectOnTheInstance(instance: any): void {\n  if (instance[DESTROY]) {\n    instance[DESTROY].next();\n    instance[DESTROY].complete();\n  }\n}\n\n/**\n * As directive and component definitions are considered private API,\n * so those properties are prefixed with Angular's marker for \"private\"\n */\nexport function getDef<T>(\n  type: DirectiveType<T> | ComponentType<T>\n): DirectiveDef<T> | ComponentDef<T> {\n  return (type as ComponentType<T>).ɵcmp || (type as DirectiveType<T>).ɵdir;\n}\n\n/**\n * Determines whether the provided `target` is some function\n * decorated with `@Injectable()`\n */\nexport function isInjectableType(target: any): target is InjectableType<unknown> {\n  return !!target.ɵprov;\n}\n","import {\n  InjectableType,\n  ɵComponentType as ComponentType,\n  ɵDirectiveType as DirectiveType\n} from '@angular/core';\n\nimport {\n  getDef,\n  isFunction,\n  UntilDestroyOptions,\n  completeSubjectOnTheInstance,\n  isInjectableType,\n  markAsDecorated\n} from './internals';\n\nfunction unsubscribe(property: any): void {\n  property && isFunction(property.unsubscribe) && property.unsubscribe();\n}\n\nfunction unsubscribeIfPropertyIsArrayLike(property: any[]): void {\n  Array.isArray(property) && property.forEach(unsubscribe);\n}\n\nfunction decorateNgOnDestroy(\n  ngOnDestroy: (() => void) | null | undefined,\n  { arrayName, checkProperties, blackList }: UntilDestroyOptions\n) {\n  return function(this: any) {\n    // Invoke the original `ngOnDestroy` if it exists\n    ngOnDestroy && ngOnDestroy.call(this);\n\n    // It's important to use `this` instead of caching instance\n    // that may lead to memory leaks\n    completeSubjectOnTheInstance(this);\n\n    // Check if subscriptions are pushed to some array\n    if (arrayName) {\n      return unsubscribeIfPropertyIsArrayLike(this[arrayName]);\n    }\n\n    // Loop through the properties and find subscriptions\n    if (checkProperties) {\n      for (const property in this) {\n        if (blackList && blackList.includes(property)) {\n          continue;\n        }\n\n        unsubscribe(this[property]);\n      }\n    }\n  };\n}\n\n/**\n * Services do not have definitions, thus we just have to override the\n * prototype property in Ivy\n */\nfunction decorateProvider(type: InjectableType<unknown>, options: UntilDestroyOptions): void {\n  type.prototype.ngOnDestroy = decorateNgOnDestroy(type.prototype.ngOnDestroy, options);\n  markAsDecorated(type);\n}\n\nfunction decorateDirective(\n  type: DirectiveType<unknown> | ComponentType<unknown>,\n  options: UntilDestroyOptions\n): void {\n  const def = getDef(type);\n  (def as any).onDestroy = decorateNgOnDestroy(def.onDestroy, options);\n  markAsDecorated(def);\n}\n\nexport function UntilDestroy(options: UntilDestroyOptions = {}): ClassDecorator {\n  return (target: any) => {\n    if (isInjectableType(target)) {\n      decorateProvider(target, options);\n    } else {\n      decorateDirective(target, options);\n    }\n  };\n}\n","import { Observable } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport {\n  DESTROY,\n  isFunction,\n  createSubjectOnTheInstance,\n  completeSubjectOnTheInstance,\n  ensureClassIsDecorated\n} from './internals';\n\nfunction overrideNonDirectiveInstanceMethod(instance: any, destroyMethodName: string): void {\n  const originalDestroy = instance[destroyMethodName];\n\n  if (isFunction(originalDestroy) === false) {\n    throw new Error(\n      `${instance.constructor.name} is using untilDestroyed but doesn't implement ${destroyMethodName}`\n    );\n  }\n\n  createSubjectOnTheInstance(instance);\n\n  instance[destroyMethodName] = function() {\n    isFunction(originalDestroy) && originalDestroy.apply(this, arguments);\n    completeSubjectOnTheInstance(this);\n  };\n}\n\nexport function untilDestroyed(instance: any, destroyMethodName?: string) {\n  return <T>(source: Observable<T>) => {\n    // If `destroyMethodName` is passed then the developer applies\n    // this operator to something non-related to Angular DI system\n    if (typeof destroyMethodName === 'string') {\n      overrideNonDirectiveInstanceMethod(instance, destroyMethodName);\n    } else {\n      ensureClassIsDecorated(instance);\n      createSubjectOnTheInstance(instance);\n    }\n\n    return source.pipe(takeUntil<T>(instance[DESTROY]));\n  };\n}\n"]}