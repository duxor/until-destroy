import { takeUntil } from 'rxjs/operators';
import { DESTROY, isFunction, createSubjectOnTheInstance, completeSubjectOnTheInstance, ensureClassIsDecorated } from './internals';
function overrideNonDirectiveInstanceMethod(instance, destroyMethodName) {
    var originalDestroy = instance[destroyMethodName];
    if (isFunction(originalDestroy) === false) {
        throw new Error(instance.constructor.name + " is using untilDestroyed but doesn't implement " + destroyMethodName);
    }
    createSubjectOnTheInstance(instance);
    instance[destroyMethodName] = function () {
        isFunction(originalDestroy) && originalDestroy.apply(this, arguments);
        completeSubjectOnTheInstance(this);
    };
}
export function untilDestroyed(instance, destroyMethodName) {
    return function (source) {
        // If `destroyMethodName` is passed then the developer applies
        // this operator to something non-related to Angular DI system
        if (typeof destroyMethodName === 'string') {
            overrideNonDirectiveInstanceMethod(instance, destroyMethodName);
        }
        else {
            ensureClassIsDecorated(instance);
            createSubjectOnTheInstance(instance);
        }
        return source.pipe(takeUntil(instance[DESTROY]));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW50aWwtZGVzdHJveWVkLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nbmVhdC91bnRpbC1kZXN0cm95LyIsInNvdXJjZXMiOlsibGliL3VudGlsLWRlc3Ryb3llZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0MsT0FBTyxFQUNMLE9BQU8sRUFDUCxVQUFVLEVBQ1YsMEJBQTBCLEVBQzFCLDRCQUE0QixFQUM1QixzQkFBc0IsRUFDdkIsTUFBTSxhQUFhLENBQUM7QUFFckIsU0FBUyxrQ0FBa0MsQ0FBQyxRQUFhLEVBQUUsaUJBQXlCO0lBQ2xGLElBQU0sZUFBZSxHQUFHLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRXBELElBQUksVUFBVSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEtBQUssRUFBRTtRQUN6QyxNQUFNLElBQUksS0FBSyxDQUNWLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSx1REFBa0QsaUJBQW1CLENBQ2xHLENBQUM7S0FDSDtJQUVELDBCQUEwQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRXJDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHO1FBQzVCLFVBQVUsQ0FBQyxlQUFlLENBQUMsSUFBSSxlQUFlLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUN0RSw0QkFBNEIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyQyxDQUFDLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWMsQ0FBQyxRQUFhLEVBQUUsaUJBQTBCO0lBQ3RFLE9BQU8sVUFBSSxNQUFxQjtRQUM5Qiw4REFBOEQ7UUFDOUQsOERBQThEO1FBQzlELElBQUksT0FBTyxpQkFBaUIsS0FBSyxRQUFRLEVBQUU7WUFDekMsa0NBQWtDLENBQUMsUUFBUSxFQUFFLGlCQUFpQixDQUFDLENBQUM7U0FDakU7YUFBTTtZQUNMLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2pDLDBCQUEwQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3RDO1FBRUQsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBSSxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3RELENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7XG4gIERFU1RST1ksXG4gIGlzRnVuY3Rpb24sXG4gIGNyZWF0ZVN1YmplY3RPblRoZUluc3RhbmNlLFxuICBjb21wbGV0ZVN1YmplY3RPblRoZUluc3RhbmNlLFxuICBlbnN1cmVDbGFzc0lzRGVjb3JhdGVkXG59IGZyb20gJy4vaW50ZXJuYWxzJztcblxuZnVuY3Rpb24gb3ZlcnJpZGVOb25EaXJlY3RpdmVJbnN0YW5jZU1ldGhvZChpbnN0YW5jZTogYW55LCBkZXN0cm95TWV0aG9kTmFtZTogc3RyaW5nKTogdm9pZCB7XG4gIGNvbnN0IG9yaWdpbmFsRGVzdHJveSA9IGluc3RhbmNlW2Rlc3Ryb3lNZXRob2ROYW1lXTtcblxuICBpZiAoaXNGdW5jdGlvbihvcmlnaW5hbERlc3Ryb3kpID09PSBmYWxzZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGAke2luc3RhbmNlLmNvbnN0cnVjdG9yLm5hbWV9IGlzIHVzaW5nIHVudGlsRGVzdHJveWVkIGJ1dCBkb2Vzbid0IGltcGxlbWVudCAke2Rlc3Ryb3lNZXRob2ROYW1lfWBcbiAgICApO1xuICB9XG5cbiAgY3JlYXRlU3ViamVjdE9uVGhlSW5zdGFuY2UoaW5zdGFuY2UpO1xuXG4gIGluc3RhbmNlW2Rlc3Ryb3lNZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgIGlzRnVuY3Rpb24ob3JpZ2luYWxEZXN0cm95KSAmJiBvcmlnaW5hbERlc3Ryb3kuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBjb21wbGV0ZVN1YmplY3RPblRoZUluc3RhbmNlKHRoaXMpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW50aWxEZXN0cm95ZWQoaW5zdGFuY2U6IGFueSwgZGVzdHJveU1ldGhvZE5hbWU/OiBzdHJpbmcpIHtcbiAgcmV0dXJuIDxUPihzb3VyY2U6IE9ic2VydmFibGU8VD4pID0+IHtcbiAgICAvLyBJZiBgZGVzdHJveU1ldGhvZE5hbWVgIGlzIHBhc3NlZCB0aGVuIHRoZSBkZXZlbG9wZXIgYXBwbGllc1xuICAgIC8vIHRoaXMgb3BlcmF0b3IgdG8gc29tZXRoaW5nIG5vbi1yZWxhdGVkIHRvIEFuZ3VsYXIgREkgc3lzdGVtXG4gICAgaWYgKHR5cGVvZiBkZXN0cm95TWV0aG9kTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG92ZXJyaWRlTm9uRGlyZWN0aXZlSW5zdGFuY2VNZXRob2QoaW5zdGFuY2UsIGRlc3Ryb3lNZXRob2ROYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW5zdXJlQ2xhc3NJc0RlY29yYXRlZChpbnN0YW5jZSk7XG4gICAgICBjcmVhdGVTdWJqZWN0T25UaGVJbnN0YW5jZShpbnN0YW5jZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNvdXJjZS5waXBlKHRha2VVbnRpbDxUPihpbnN0YW5jZVtERVNUUk9ZXSkpO1xuICB9O1xufVxuIl19