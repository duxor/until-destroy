import { takeUntil } from 'rxjs/operators';
import { DESTROY, isFunction, createSubjectOnTheInstance, completeSubjectOnTheInstance, ensureClassIsDecorated } from './internals';
function overrideNonDirectiveInstanceMethod(instance, destroyMethodName) {
    const originalDestroy = instance[destroyMethodName];
    if (isFunction(originalDestroy) === false) {
        throw new Error(`${instance.constructor.name} is using untilDestroyed but doesn't implement ${destroyMethodName}`);
    }
    createSubjectOnTheInstance(instance);
    instance[destroyMethodName] = function () {
        isFunction(originalDestroy) && originalDestroy.apply(this, arguments);
        completeSubjectOnTheInstance(this);
    };
}
export function untilDestroyed(instance, destroyMethodName) {
    return (source) => {
        // If `destroyMethodName` is passed then the developer applies
        // this operator to something non-related to Angular DI system
        if (typeof destroyMethodName === 'string') {
            overrideNonDirectiveInstanceMethod(instance, destroyMethodName);
        }
        else {
            ensureClassIsDecorated(instance);
            createSubjectOnTheInstance(instance);
        }
        return source.pipe(takeUntil(instance[DESTROY]));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW50aWwtZGVzdHJveWVkLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nbmVhdC91bnRpbC1kZXN0cm95LyIsInNvdXJjZXMiOlsibGliL3VudGlsLWRlc3Ryb3llZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0MsT0FBTyxFQUNMLE9BQU8sRUFDUCxVQUFVLEVBQ1YsMEJBQTBCLEVBQzFCLDRCQUE0QixFQUM1QixzQkFBc0IsRUFDdkIsTUFBTSxhQUFhLENBQUM7QUFFckIsU0FBUyxrQ0FBa0MsQ0FBQyxRQUFhLEVBQUUsaUJBQXlCO0lBQ2xGLE1BQU0sZUFBZSxHQUFHLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRXBELElBQUksVUFBVSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEtBQUssRUFBRTtRQUN6QyxNQUFNLElBQUksS0FBSyxDQUNiLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLGtEQUFrRCxpQkFBaUIsRUFBRSxDQUNsRyxDQUFDO0tBQ0g7SUFFRCwwQkFBMEIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUVyQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsR0FBRztRQUM1QixVQUFVLENBQUMsZUFBZSxDQUFDLElBQUksZUFBZSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFDdEUsNEJBQTRCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckMsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSxjQUFjLENBQUMsUUFBYSxFQUFFLGlCQUEwQjtJQUN0RSxPQUFPLENBQUksTUFBcUIsRUFBRSxFQUFFO1FBQ2xDLDhEQUE4RDtRQUM5RCw4REFBOEQ7UUFDOUQsSUFBSSxPQUFPLGlCQUFpQixLQUFLLFFBQVEsRUFBRTtZQUN6QyxrQ0FBa0MsQ0FBQyxRQUFRLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztTQUNqRTthQUFNO1lBQ0wsc0JBQXNCLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDakMsMEJBQTBCLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDdEM7UUFFRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtcbiAgREVTVFJPWSxcbiAgaXNGdW5jdGlvbixcbiAgY3JlYXRlU3ViamVjdE9uVGhlSW5zdGFuY2UsXG4gIGNvbXBsZXRlU3ViamVjdE9uVGhlSW5zdGFuY2UsXG4gIGVuc3VyZUNsYXNzSXNEZWNvcmF0ZWRcbn0gZnJvbSAnLi9pbnRlcm5hbHMnO1xuXG5mdW5jdGlvbiBvdmVycmlkZU5vbkRpcmVjdGl2ZUluc3RhbmNlTWV0aG9kKGluc3RhbmNlOiBhbnksIGRlc3Ryb3lNZXRob2ROYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgY29uc3Qgb3JpZ2luYWxEZXN0cm95ID0gaW5zdGFuY2VbZGVzdHJveU1ldGhvZE5hbWVdO1xuXG4gIGlmIChpc0Z1bmN0aW9uKG9yaWdpbmFsRGVzdHJveSkgPT09IGZhbHNlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYCR7aW5zdGFuY2UuY29uc3RydWN0b3IubmFtZX0gaXMgdXNpbmcgdW50aWxEZXN0cm95ZWQgYnV0IGRvZXNuJ3QgaW1wbGVtZW50ICR7ZGVzdHJveU1ldGhvZE5hbWV9YFxuICAgICk7XG4gIH1cblxuICBjcmVhdGVTdWJqZWN0T25UaGVJbnN0YW5jZShpbnN0YW5jZSk7XG5cbiAgaW5zdGFuY2VbZGVzdHJveU1ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgaXNGdW5jdGlvbihvcmlnaW5hbERlc3Ryb3kpICYmIG9yaWdpbmFsRGVzdHJveS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGNvbXBsZXRlU3ViamVjdE9uVGhlSW5zdGFuY2UodGhpcyk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnRpbERlc3Ryb3llZChpbnN0YW5jZTogYW55LCBkZXN0cm95TWV0aG9kTmFtZT86IHN0cmluZykge1xuICByZXR1cm4gPFQ+KHNvdXJjZTogT2JzZXJ2YWJsZTxUPikgPT4ge1xuICAgIC8vIElmIGBkZXN0cm95TWV0aG9kTmFtZWAgaXMgcGFzc2VkIHRoZW4gdGhlIGRldmVsb3BlciBhcHBsaWVzXG4gICAgLy8gdGhpcyBvcGVyYXRvciB0byBzb21ldGhpbmcgbm9uLXJlbGF0ZWQgdG8gQW5ndWxhciBESSBzeXN0ZW1cbiAgICBpZiAodHlwZW9mIGRlc3Ryb3lNZXRob2ROYW1lID09PSAnc3RyaW5nJykge1xuICAgICAgb3ZlcnJpZGVOb25EaXJlY3RpdmVJbnN0YW5jZU1ldGhvZChpbnN0YW5jZSwgZGVzdHJveU1ldGhvZE5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnN1cmVDbGFzc0lzRGVjb3JhdGVkKGluc3RhbmNlKTtcbiAgICAgIGNyZWF0ZVN1YmplY3RPblRoZUluc3RhbmNlKGluc3RhbmNlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc291cmNlLnBpcGUodGFrZVVudGlsPFQ+KGluc3RhbmNlW0RFU1RST1ldKSk7XG4gIH07XG59XG4iXX0=